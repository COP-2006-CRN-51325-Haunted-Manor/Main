#include <iostream>
#include <string>
#include <algorithm>
#include <limits>
using namespace std;

//function declarations
void intro();
void foyer();
void stairwell();
void library();
void music_room();
void office();
void kitchen();
void living_room();
void tryDoor();
void basement();
void dining_room();
void redherring1();
void redherring2();

//global conditions
bool hasKey = false;
bool booksSwapped = false;

int main() {
    intro();
    foyer();
    return 0;
}

//intro
void intro() {
    cout << "---------------------------------------------------\n";
    cout << "     WELCOME TO THE HAUNTED HOUSE ADVENTURE\n";
    cout << "---------------------------------------------------\n\n";
    cout << "It's a dark Halloween night. You are a high school student named Alex.\n"
        << "Your friends dared you to step into the old haunted mansion on the hill.\n"
        << "You gather your courage and open the front door...\n"
        << "*CREAK*\n"
        << "You step inside and the door slams shut behind you!\n"
        << "A ghostly lock appears on the door. You must find the key to escape.\n\n";
}

//foyer
void foyer() {
    bool looked = false;
    string choice;
    while (true) {
        cout << "\nYou are in the FOYER.\n";
        cout << "What would you like to do?\n";
        if (!looked) cout << "1. Look around\n";
        cout << "2. Try the front door\n";
        if (looked) {
            cout << "3. Enter kitchen\n";
            cout << "4. Enter stairwell\n";
            cout << "5. Enter living room\n";
        }
        cout << "Choice: ";
        getline(cin, choice);

        if (choice == "1" && !looked) {
            looked = true;
            cout << "You see several doors leading to different rooms.\n";
        } else if (choice == "2") {
            tryDoor();
        } else if (choice == "3" && looked) {
            kitchen();
        } else if (choice == "4" && looked) {
            stairwell();
            break;
        } else if (choice == "5" && looked) {
            living_room();
        } else {
            cout << "Invalid choice.\n";
        }
    }
}

//stairwell
void stairwell() {
    string choice;
    cout << "\nYou are in the STAIRWELL.\n";
    while (true) {
        cout << "What would you like to do?\n";
        cout << "1. Go up to the library\n";
        cout << "2. Return to foyer\n";
        cout << "Choice: ";
        getline(cin, choice);

        if (choice == "1") {
            library();
            break;
        } else if (choice == "2") {
            foyer();
            break;
        } else {
            cout << "Invalid choice.\n";
        }
    }
}

//try front door
void tryDoor() {
    if (hasKey) {
        cout << "You unlock the door and escape the haunted house!\n";
        exit(0);
    } else {
        cout << "The door is sealed by magic. You need a key.\n";
    }
}

//kitchen
void kitchen() {
    bool looked = false;
    string choice;
    while (true) {
        cout << "\nYou are in the KITCHEN.\n";
        cout << "What would you like to do?\n";
        if (!looked) cout << "1. Look around\n";
        cout << "2. Return to foyer\n";
        cout << "Choice: ";
        getline(cin, choice);

        if (choice == "1" && !looked) {
            looked = true;
            cout << "\n";
        } else if (choice == "2") {
            foyer();
            break;
        } else {
            cout << "Invalid choice.\n";
        }
    }
}

//living Room
void living_room() {
    bool looked = false;
    string choice;
    while (true) {
        cout << "\nYou are in the LIVING ROOM.\n";
        cout << "What would you like to do?\n";
        if (!looked) cout << "1. Look around\n";
        cout << "2. Return to foyer\n";
        cout << "Choice: ";
        getline(cin, choice);

        if (choice == "1" && !looked) {
            looked = true;
        } else if (choice == "2") {
            foyer();
            break;
        } else {
            cout << "Invalid choice.\n";
        }
    }
}

//library
void library() {
    bool looked = false;
    string choice;
    string redBook = "Red";
    string blueBook = "Blue";

    while (true) {
        cout << "\nYou are in the LIBRARY.\n";
        cout << "What would you like to do?\n";
        if (!looked) cout << "1. Look around\n";
        if (looked && !booksSwapped) cout << "2. Swap the red and blue books\n";
        if (booksSwapped) cout << "2. Enter music room\n";
        if (looked) {
            cout << "3. Enter office\n";
            cout << "4. Return to stairwell\n";
        }
        cout << "Choice: ";
        getline(cin, choice);

        if (choice == "1" && !looked) {
            looked = true;
            cout << "You notice two odd books: one red and one blue.\n";
            cout << "An inscription reads:\n";
            cout << "\"When red and blue change their view, a secret will appear to you.\"\n";
        } else if (choice == "2" && looked && !booksSwapped) {
            cout << "You swap the red and blue books on the shelf.\n";
            swap(redBook, blueBook);
            if (redBook != "Red") {
                booksSwapped = true;
                cout << "The bookshelf trembles... a secret passage opens to the MUSIC ROOM!\n";
            } else {
                cout << "Nothing seems to happen.\n";
            }
        } else if (choice == "2" && booksSwapped) {
            music_room();
            break;
        } else if (choice == "3" && looked) {
            office();
            break;
        } else if (choice == "4" && looked) {
            stairwell();
            break;
        } else {
            cout << "Invalid choice.\n";
        }
    }
}

// Office
void office() {
    bool looked = false;
    string choice;
    while (true) {
        cout << "\nYou are in the OFFICE.\n";
        cout << "What would you like to do?\n";
        if (!looked) cout << "1. Look around\n";
        cout << "2. Return to library\n";
        cout << "Choice: ";
        getline(cin, choice);

        if (choice == "1" && !looked) {
            looked = true;
            cout << "\n";
        } else if (choice == "2") {
            library();
            break;
        } else {
            cout << "Invalid choice.\n";
        }
    }
}

//music Room with note puzzle
void music_room() {
    bool looked = false;
    bool puzzleSolved = false;
    string choice;
    string userInput;
    const string correctSequence = "CDEFG";

    while (true) {
        cout << "\nYou are in the MUSIC ROOM.\n";
        cout << "A grand piano sits at the center. There's a small sealed box sitting atop the piano.\n";
        cout << "What would you like to do?\n";
        if (!looked) {
            cout << "1. Look at the piano and box\n";
        }
        if (looked && !puzzleSolved) {
            cout << "2. Play a sequence of notes\n";
            cout << "3. Return to library\n";
        }
        if (puzzleSolved) {
            cout << "1. Return to library\n";
        }
        cout << "Choice: ";
        getline(cin, choice);

        if (choice == "1" && !looked) {
            looked = true;
            cout << "You examine the piano. A note on the box reads:\n";
            cout << "\"Only the right melody will grant the key. Five notes to harmony.\"\n";
            cout << "You suspect you need to play a specific sequence of 5 musical notes (A-G).\n";
        } else if (choice == "2" && looked && !puzzleSolved) {
            cout << "Enter 5 notes (e.g., CDEFG): ";
            getline(cin, userInput);

            if (userInput == correctSequence) {
                cout << "The box clicks open! Inside, you find a small brass key.\n";
                hasKey = true;
                puzzleSolved = true;
            } else {
                cout << "Nothing happens. That wasn't the correct sequence.\n";
            }
        } else if ((choice == "3" && !puzzleSolved) || (choice == "1" && puzzleSolved)) {
            library();
            break;
        } else {
            cout << "Invalid choice.\n";
        }
    }
}

//Dining Room
//Functions declaration
bool hasLooked = false;
int bulbsLit;
int newPosition;
int chairID;
int chairs;
moveChair(chairs, chairID, newPosition, bulbsLit);

void dining_room() {
    std::cout << "You push open the grand dining room doors. A big gust of wind follows you and stirs up all the dust that had settled over the furniture.\n";
    std::cout << "You can spot massive cobwebs in the corner of the rooms and all over the chandelier that's in the middle of the room. \nYou wonder how long its been since a living soul has stepped into this room.\n";
    std::cout<<"Besides the chandelier, a table of 8 is set for what looks like a grand dinner.\n Most of the plate settings are still set on the table, but not all of them.\n";
    std::cout<< "There are 3 plate settings that are strewn about the floor. You question what happened in this house.\n";
    std::cout<<"You also note that the chairs are askew. One chair is pushed against the window as if someone had attempted to escape.\n";
    std::cout<<"You have this urge to explore this room, whether to find out more clues about happened, or figure out a way to get out.";
}

//The player can look around the room. This is for the purpose of the hint, so the player knows in which order the chairs go in.
void lookAround() {
    cout << "\nOn the wall you immediately notice the huge, dusty painting. It looks like the family sitting down in the dining room.\n"
        <<"You touch the picture to rub off some of the dust and a cold chill comes over your shoulder and down your back.\n";
    cout<<"After some of the dust is wiped off, you note that the chairs are in a certain order. The picture looks odd because its a top down view of the dining table.\n";
    cout<<"There are two chairs, one at each head of the table, with dusty arm rests.\n";
    hasLooked = true;

}

//The dining room puzzle
/* The objective: The player has to move the chair in a certain order around the table to get the music note that is required at the end.
 *The hint for the correct order is in a painting on the wall. The chairs will be in the correct position and based off of the description details that the player
 *sees in the beginning plus when they look at the painting, should give them context clues on how to move the chairs.
 *If you're looking at a top-down view of the dining table, the chair positions start at 1 and go counter-clockwise, counting to 8.
 * The chair's positions when the player finds them the first time is:
* Chair 3= chair 1 position, Chair 4=Chair 2 position, Chair 7 = Chair 3 position,	Chair 2 = Chair 4 position,	Chair 5 = Chair 5 position (the only correct one)
	Chair 1= Chair 6 position, Chair 8 = Chair 7 position, Chair 6 = Chair 8 position

In addition to the chairs, the chandelier will slowly light up, till it's completely lit up and then slowly fade to blackness.
 */

// Function declarations for the chair structures
struct Chair {
    int id;
    int current_position;
    int correct_position;
    std::string special_identifier;
    bool is_correct; // Track if the chair is already placed correctly

};


// This is to initialize the chairs. You have the what's the current position, the correct and any special identifiers.
bool initializeChairs(Chair chairs[8]) {
    chairs[0] = {1, 3, 1, "captain seat with arms", false}; //One head of the table
    chairs[1] = {2, 4, 2, "missing plate setting", false};
    chairs[2] = {3, 7, 3, "", false};
    chairs[3] = {4, 2, 4, "", false};
    chairs[4] = {5, 5, 5, "captain seat with arms",false}; //The other head of the table
    chairs[5] = {6, 1, 6, "",false};
    chairs[6] = {7, 8, 7, "",false};
    chairs[7] = {8, 6, 8, "missing plate setting, pushed against the window",false};


    //Function to move the chairs. It takes user input.
    while (true) {
        std::cout << "\nEnter the chair number (1-8) you want to move: ";
        int chairID, newPosition;

        std::cin >> chairID;
        if (std::cin.fail() || chairID < 1 || chairID > 8) {
            std::cin.clear();
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            std::cout << "Invalid input! Please enter a valid chair number (1-8).\n";
            continue;
        }

        std::cout << "Enter the new position (1-8): ";
        std::cin >> newPosition;
        if (std::cin.fail() || newPosition < 1 || newPosition > 8) {
            std::cin.clear();
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            std::cout << "Invalid input! Please enter a valid position (1-8).\n";
            continue;
        }
    }
}



        // Function to move a chair and update chandelier
void movechair(Chair chairs[], int chairID, int newPosition, int &bulbsLit) {
    for (int i = 0; i < 8; ++i) {
        if (chairs[i].id == chairID) {
            chairs[i].current_position = newPosition;
            std::cout << "Chair " << chairID << " moved to position " << newPosition << ".\n";

            // Check if it's correctly placed and hasn't already been counted
            if (chairs[i].current_position == chairs[i].correct_position && !chairs[i].is_correct) {
                chairs[i].is_correct = true;
                bulbsLit++; // Light up one more bulb
                std::cout << "Chair " << chairID << " is now correctly placed!\n";
                std::cout << "A light bulb has lit up on the chandelier! (Bulbs lit: " << bulbsLit << "/8)\n";
            }
            return;
        }
    }
    std::cout << "Invalid chair ID!\n";
}

//Function to check the chandelier (and the completion of the puzzle)
void checkAllCorrect(int bulbsLit) {
    if (bulbsLit == 8) {
        std::cout << "\nThe chandelier is **fully lit**! 🎵 Ding! You solved the puzzle!\n";
        std::cout << "As you step out of the room, you hear whispers of laughing, dishes clinking, and clear enjoyment of a grand dinner ... ";
        std::cout << "the chandelier fades into darkness.\n";

        // Reset bulbsLit (if needed)
        bulbsLit = 0;
    }
}

